plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // Log4J for logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

    // JUnit for testing
    testImplementation 'junit:junit:4.12'
}

mainClassName = 'basic_demo.App'
description = "A trivial Gradle build"
version = "0.1.0"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes "Main-Class": "basic_demo.App"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runClient(type: JavaExec, dependsOn: classes) {
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'basic_demo.ChatClientApp'
    args 'localhost', '59001'
}

task runServer(type: JavaExec) {
    mainClass.set('basic_demo.ChatServerApp')
    args '59002'
    classpath = sourceSets.main.runtimeClasspath
}

task backupSources(type: Copy) {
    description = 'Backs up the source files to a backup directory.'
    from 'src' // specifies the source directory to copy from
    into 'backup' // specifies the destination directory to copy to
}

task zipSources(type: Zip) {
    description = 'Archives the source files into a zip file.'
    archiveBaseName.set('application-sources') // Sets the base name of the archive
    destinationDirectory.set(file("$buildDir/archives")) // Sets the destination directory for the zip

    from 'src' // Specifies the source directory to include in the zip
}
