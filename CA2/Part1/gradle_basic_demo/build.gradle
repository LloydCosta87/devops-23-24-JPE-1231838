plugins {
    id 'java'
    id 'application'
    id "org.siouan.frontend-jdk17" version "8.0.0"
}

repositories {
    mavenCentral()
}

dependencies {
    // Log4J for logging
    implementation 'org.apache.logging.log4j:log4j-api:2.11.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.2'

    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

application {
    mainClassName = 'basic_demo.App'
}

description = "A trivial Gradle build"
version = "0.1.0"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes "Main-Class": "basic_demo.App"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runClient(type: JavaExec, dependsOn: classes) {
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('basic_demo.ChatClientApp')
    args 'localhost', '59001'
}

task runServer(type: JavaExec) {
    mainClass.set('basic_demo.ChatServerApp')
    args '59001'
    classpath = sourceSets.main.runtimeClasspath
}

task backupSources(type: Copy) {
    description = 'Backs up the source files to a backup directory.'
    from 'src'
    into 'backup'
}

task zipSources(type: Zip) {
    description = 'Archives the source files into a zip file.'
    archiveBaseName.set('application-sources')
    destinationDirectory.set(file("$buildDir/archives"))
    from 'src'
}

frontend {
    nodeVersion = "16.20.2"
    assembleScript = "run build"
    cleanScript = "run clean"
    checkScript = "run check"
}

test {
    useJUnitPlatform()
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
}
